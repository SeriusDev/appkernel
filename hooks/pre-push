#!/bin/bash

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

echo "=====> pre push hook is activated"

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi

		# Check for WIP commit
		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
		if [ -n "$commit" ]
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

# echo "passed: @ > ${@}"
# echo "passed: * > ${*}"

function check_result {
    echo ">> pylint analysis result code: $1"
    [ $1 -ne 0 ] && echo >&2 $2 && exit $1 || :
}


HOOK_DIR=$( dirname "${BASH_SOURCE[0]}" )
PROJECT_DIR=${HOOK_DIR}/../..
echo "hook dir: ${HOOK_DIR}"
echo "project dir: ${PROJECT_DIR}"
source  ${PROJECT_DIR}/venv/bin/activate
check_result $? ">> Error: could not switch to virtualenv"

pytest ${PROJECT_DIR}/tests -s -v --capture=no
check_result $? "some tests are failed, please fix it first."

modules=("appkernel")
for module in "${modules[@]}"
    do
        echo ">> analysing module: ${1}/${module}"
        MODULE_DIR="${PROJECT_DIR}/${module}"
        [ -d "${MODULE_DIR}" ] && echo ">> OK: ${MODULE_DIR} exists" || (echo >&2 ">> Error: ${MODULE_DIR} does not exists" && exit -1)
        pylint --rcfile=${PROJECT_DIR}/pylintrc ${MODULE_DIR}
        check_result $? ">> Error: pylint did not accepted the style of ${module}. Please fix it before pushing."
    done
exit 0
